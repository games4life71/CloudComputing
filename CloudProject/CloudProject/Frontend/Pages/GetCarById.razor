@page "/car/{carId:guid}"
@using Frontend.ViewModels
@inject HttpClient _httpClient
@layout MainLayout
@inject NavigationManager NavigationManager
<h3>Car information :</h3>


<Container>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            @if (Car != null)
            {
                <Card>
                    <CardHeader>
                        <CardTitle>@Car.name</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <CardText>
                            <strong>Speed:</strong> @Car.speed
                        </CardText>
                        <CardText>
                            <strong>Year:</strong> @Car.year
                        </CardText>
                    </CardBody>
                </Card>
                <Button Color="Color.Primary" Clicked="SeeMoreCarInfo">See more info</Button>
            }
            else
            {
                <Flex JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="height: 100vh;">
                    <SpinKit Type="SpinKitType.Flow" Color="#ff4a3d" Centered="true"/>
                </Flex>
            }
        </Column>
    </Row>
</Container>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-1 " role="alert">
        <div class=" d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-exclamation-circle"></i>
                <span class="ms-2 fw-bold">@_errorMessage</span>
            </div>
            <div>
                <button type="button" class="btn-close" data-bs-dismiss="alert" onclick="@CloseBtn" aria-label="Close"></button>
            </div>
        </div>
    </div>
}

@code {

    [Parameter] public Guid CarId { get; set; }
    string _errorMessage = string.Empty;


    public CarViewModel? Car { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.GetAsync($"http://localhost:5127/api/v1/Car/cars/{CarId}");
        try
        {
            if (!response.IsSuccessStatusCode)
            {
                _errorMessage = "Failed to load car";
            }

            Car = await response.Content.ReadFromJsonAsync<CarViewModel>();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void CloseBtn()
    {
        _errorMessage = "";
        // _successMessage = "";
    }

    private Task SeeMoreCarInfo(MouseEventArgs arg)
    {

        NavigationManager.NavigateTo($"/car-info?carMake={Car.name}");
        return Task.CompletedTask;
    }

}